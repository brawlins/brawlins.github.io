{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/formatters.js"],"names":["_ref","name","styles","IndexPage","_ref2","edges","data","allMarkdownRemark","postCount","length","postCountString","pluralize","___EmotionJSX","Layout","SEO","title","css","flexHeader","map","edge","_edge$node","node","frontmatter","excerpt","fields","slug","postWrapper","Link","key","to","toSlug","toLowerCase","replace","module","exports","formatDate","dateString","dateStyle","formattingOptions","Intl","DateTimeFormat","format","Date","getPathToPost","number","singular","plural","pluralEnding","test","isNaN","Number"],"mappings":"2FAAA,iFAM+CA,EAAA,CAAAC,KAAA,SAAAC,OAAA,YAuDhCC,UArDG,SAAHC,GAAkB,IACvBC,EADeD,EAAJE,KACIC,kBAAfF,MACJG,EAAYH,EAAMI,QAAU,EAC5BC,EAAkBF,EAAY,IAAMG,oBAAUH,EAAW,QAE7D,OACEI,YAACC,IAAM,KACLD,YAACE,IAAG,CAACC,MAAM,SACXH,YAAA,OAAKI,IAAKC,GACRL,YAAA,MAAII,IAAGhB,GAAiB,QACxBY,YAAA,YAAOF,IAERL,EAAMa,KAAI,SAAAC,GACT,IAAAC,EAAyCD,EAAKE,KAAtCC,EAAWF,EAAXE,YAAaC,EAAOH,EAAPG,QAASC,EAAMJ,EAANI,OACtBT,EAAUO,EAAVP,MACAU,EAASD,EAATC,KACR,OACEb,YAAA,OAAKI,IAAKU,GACRd,YAAA,UACEA,YAACe,OAAI,CAACC,IAAKH,EAAMI,GAAIJ,GAClBV,IAGLH,YAAA,SAAIW,OAIVX,YAAA,WACEA,YAACe,OAAI,CAACE,GAAG,SAAO,oBA2BxB,IAAMZ,EAAU,CAAAhB,KAAA,UAAAC,OAAA,yGAQVwB,EAAW,CAAAzB,KAAA,SAAAC,OAAA,iI,qBCvEjB,SAAS4B,EAAOf,GACd,IAAIU,EAAO,GASX,OARIV,IACFU,EAAOV,EACJgB,cAEAC,QAAQ,UAAW,KAEnBA,QAAQ,UAAW,KAEjBP,EA4CTQ,EAAOC,QAAU,CAAEJ,SAAQK,WAzC3B,SAAoBC,EAAYC,QAAS,IAATA,MAAY,QAC1C,IAAIC,EAAoB,CAAED,aAC1B,OAAO,IAAIE,KAAKC,eAAe,QAASF,GAAmBG,OACzD,IAAIC,KAAKN,KAsC0BO,cAlCvC,SAAuB5B,GACrB,MAAO,SAAWe,EAAOf,IAiC2BJ,UAtBtD,SAAmBiC,EAAQC,EAAUC,QAAM,IAANA,MAAS,MAE5C,IAAIC,EAAe,IASnB,OAPI,WAAWC,KAAKH,IAAa,WAAWG,KAAKH,MAC/CE,EAAe,MAGjBD,EAASA,GAAUD,EAAWE,GAGR,IAAlBE,MAAML,GACD,GAOS,KAHlBA,EAASM,OAAON,IAGMC,EAAWC","file":"component---src-pages-index-js-b2f1b0a1f5940ce48f34.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { pluralize } from \"../utils/formatters\"\n\nconst IndexPage = ({ data }) => {\n  const { edges } = data.allMarkdownRemark\n  let postCount = edges.length || 0\n  let postCountString = postCount + ' ' + pluralize(postCount, 'Post')\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <div css={flexHeader}>\n        <h1 css={css`margin: 0`}>Blog</h1>\n        <span>{postCountString}</span>\n      </div>\n      {edges.map(edge => {\n        const { frontmatter, excerpt, fields } = edge.node\n        const { title } = frontmatter\n        const { slug } = fields\n        return (\n          <div css={postWrapper}>\n            <h2>\n              <Link key={slug} to={slug}>\n                {title}\n              </Link>\n            </h2>\n            <p>{excerpt}</p>\n          </div>\n        )\n      })}\n      <div>\n        <Link to=\"/tags\">Browse by tag</Link>\n      </div>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query markdownPosts {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n\nconst flexHeader = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2.5em;\n`\n\nconst postWrapper = css`\n  margin-bottom: 2.5em;\n\n  .postDate {\n    color: #999;\n    font-size: 0.8em;\n    margin-bottom: 5px;\n  }\n  h2 {\n    margin-top: 0;\n    margin-bottom: 10px;\n  }\n  p {\n    margin: 0;\n  }\n`\n","function toSlug(title) {\n  let slug = \"\"\n  if (title) {\n    slug = title\n      .toLowerCase()\n      // Separate words with hyphens\n      .replace(/[\\s.]+/g, \"-\")\n      // Remove unwanted characters\n      .replace(/[^\\w-]/g, \"\")\n  }\n  return slug\n}\n\nfunction formatDate(dateString, dateStyle = \"long\") {\n  let formattingOptions = { dateStyle }\n  return new Intl.DateTimeFormat(\"en-US\", formattingOptions).format(\n    new Date(dateString)\n  )\n}\n\nfunction getPathToPost(title) {\n  return \"/blog/\" + toSlug(title)\n}\n\n/**\n * Returns the singular or plural form based on the given number\n *\n * @param {Number} number - number\n * @param {String} singular - the singular form of the word\n * @param {String} plural - the plural form of the word\n * @returns {String}\n */\nfunction pluralize(number, singular, plural = null) {\n  // Define the default plural ending\n  let pluralEnding = 's';\n  // Handle notable exceptions\n  if (/(s|x|z)$/.test(singular) || /(ch|sh)$/.test(singular)) {\n    pluralEnding = 'es';\n  }\n  // If plural given, use it, otherwise add pluralEnding\n  plural = plural || singular + pluralEnding;\n\n  // Exit early if not a number\n  if (isNaN(number) === true) {\n    return '';\n  }\n\n  // Convert number string to number\n  number = Number(number);\n\n  // Return the correct form\n  return number === 1 ? singular : plural;\n}\n\nmodule.exports = { toSlug, formatDate, getPathToPost, pluralize }\n"],"sourceRoot":""}