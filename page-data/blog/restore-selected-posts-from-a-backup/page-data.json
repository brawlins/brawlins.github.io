{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/restore-selected-posts-from-a-backup","result":{"data":{"markdownRemark":{"html":"<p>Recently at work we had a situation where we needed to roll back to the previous day's backup of our WordPress site to undo some changes that went awry. However, since posts had been added and modified since that time, we also needed to restore those posts (and associated meta records) after we rolled back. Here's one way to do that.</p>\n<h2>1. Clone the database in its current state</h2>\n<p>First of all, we need to clone the database in its current state so that we don't lose any work that was done since yesterday's backup. Then later we can compare this clone to yesterday's backup to determine which posts to re-import.</p>\n<p>Create an empty database for the clone:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> my_database_clone<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then export your current database and import it into the clone:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">mysqldump -u username -p my_database <span class=\"token operator\">></span> my_database_clone.sql\nmysql -u username -p my_database_clone <span class=\"token operator\">&lt;</span> my_database_clone.sql</code></pre></div>\n<h2> 2. Roll back to a previous backup</h2>\n<p>Locate yesterday's backup file (or whatever point you want to roll back to), and import it into your database:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">mysql -u username -p my_database <span class=\"token operator\">&lt;</span> previous_backup.sql</code></pre></div>\n<h2> 3. Identify the posts to restore</h2>\n<p>Write a query to identify the posts you want to restore from the clone. In this example I'm selecting anything modified after the date I rolled back to:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> my_database_clone<span class=\"token punctuation\">.</span>wp_posts\n<span class=\"token keyword\">WHERE</span> post_modified <span class=\"token operator\">>=</span> <span class=\"token string\">'2014-02-10'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> post_modified <span class=\"token keyword\">DESC</span></code></pre></div>\n<p>Adjust your query as needed to select just the posts you want.</p>\n<h2>4. Insert them from the clone</h2>\n<p>Now, using that query, we'll re-insert them from the clone into our database.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">IGNORE</span> <span class=\"token keyword\">INTO</span> my_database<span class=\"token punctuation\">.</span>wp_posts\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> my_database_clone<span class=\"token punctuation\">.</span>wp_posts\n<span class=\"token keyword\">WHERE</span> post_modified <span class=\"token operator\">>=</span> <span class=\"token string\">'2014-02-10'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> post_modified <span class=\"token keyword\">DESC</span></code></pre></div>\n<p>The <code class=\"language-text\">IGNORE</code> keyword suppresses any duplicate-key errors that would cause the statement to abort. See the documentation on <a href=\"http://dev.mysql.com/doc/refman/5.6/en/insert.html\" target=\"_blank\">INSERT Syntax</a> for details.</p>\n<h2>5. Get associated meta records too</h2>\n<p>We're almost there. Now we have the posts that were modified since the rollback, but we also need to get the associated post meta records. First select them to make sure we know what we'll be inserting. Here I'm selecting everything from both tables, so I can see which posts I'm dealing with:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> my_database_clone<span class=\"token punctuation\">.</span>wp_postmeta m\n<span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> my_database_clone<span class=\"token punctuation\">.</span>wp_posts p <span class=\"token keyword\">ON</span> p<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>post_id\n<span class=\"token keyword\">WHERE</span> post_modified <span class=\"token operator\">>=</span> <span class=\"token string\">'2014-02-10'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> post_id<span class=\"token punctuation\">,</span> meta_id</code></pre></div>\n<p>Now just add the <code class=\"language-text\">INSERT</code> statement and select only from the postmeta table to insert them:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">IGNORE</span> <span class=\"token keyword\">INTO</span> my_database<span class=\"token punctuation\">.</span>wp_postmeta\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> my_database_clone<span class=\"token punctuation\">.</span>wp_postmeta\n<span class=\"token keyword\">WHERE</span> post_modified <span class=\"token operator\">>=</span> <span class=\"token string\">'2014-02-10'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> post_id<span class=\"token punctuation\">,</span> meta_id</code></pre></div>\n<p>That should do it.</p>","frontmatter":{"title":"Restore selected posts from a backup","date":"February 14, 2014","tags":["mysql","wordpress"]},"fields":{"slug":"/blog/restore-selected-posts-from-a-backup"}}},"pageContext":{"title":"Restore selected posts from a backup","prev":{"frontmatter":{"title":"Apache redirect vs. rewrite","tags":["apache"]},"excerpt":"Apache rewrite rules can be very confusing at times. They're very powerful, but not easily understood or mastered. I don't claim to be an…","fields":{"slug":"/blog/apache-redirect-vs-rewrite"}},"next":{"frontmatter":{"title":"Sorting and filtering on custom columns","tags":["wordpress"]},"excerpt":"This is a 2-part post discussing how to set up custom columns for a custom post type in WordPress. Part 1 focuses on adding custom columns…","fields":{"slug":"/blog/sorting-and-filtering-on-custom-columns"}}}},"staticQueryHashes":["3649515864","63159454"]}