{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/react-component-for-svg-icons","result":{"data":{"markdownRemark":{"html":"<h2>A day late and a dollar short</h2>\n<p>I’ve been using React v0.13 which has some trouble handling SVG elements. Last month I decided to create a component to help with that problem. Here’s the gist on github:</p>\n<p><a href=\"https://gist.github.com/brawlins/e84c28badd0e6172d9e5\">Gist: SvgIcon.js</a></p>\n<p>However, with the release of v0.14, React now handles SVG elements fine. You just have to be sure to camelcase the attributes (“xlinkHref” instead of “xlink:href”). <a href=\"https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#notable-enhancements\" target=\"_blank\">See the release notes</a> for details.</p>\n<p>I decided to post this anyway just in case it’s useful to anyone.</p>\n<h2>The problem</h2>\n<p>The problem is that SVG is an XML-based format and React was not set up to digest XML. So when React encountered an element like this in the JSX:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 50 50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#icon-checkmark<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>use</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>it would choke on the <code class=\"language-text\">xlink:href</code> attribute and throw an error.</p>\n<h2>The solution</h2>\n<p>The workaround involves using React’s <code class=\"language-text\">dangerouslySetInnerHTML</code> property. If you create an HTML element (say a <span> tag), you can set its inner HTML using this property and then React doesn’t care what you put in there. It trusts that you know what you’re doing.</p>\n<p>The implementation looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    dangerouslySetInnerHTML<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        __html<span class=\"token operator\">:</span> <span class=\"token string\">'whatever HTML I want'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Usage</h2>\n<p>I usually insert a single SVG document at the top of the <code class=\"language-text\">&lt;body&gt;</code> element that contains symbol definitions for icons that I can use. Then they can be referenced anywhere in the application with the <code class=\"language-text\">&lt;use&gt;</code> tag as shown above.</p>\n<p>Here’s an example. If I pass the component these props:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>SvgIcon\n    classNames<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'spin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n    show<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">}</span>\n    symbolId<span class=\"token operator\">=</span><span class=\"token string\">\"icon-loader\"</span>\n    wrapperTag<span class=\"token operator\">=</span><span class=\"token string\">\"span\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>it will render this HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon spin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>use</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#icon-loader<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>use</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Here I’m rendering a spinning loader icon inside of a span tag. This will be rendered when <code class=\"language-text\">{this.state.loading}</code> is true and disappear when it is false.</p>\n<p>The component has the following propTypes. The only one that is required is symbolId:</p>\n<ul>\n<li><strong>classNames</strong>: array of class names</li>\n<li><strong>show</strong>: boolean (defaults to true), usually a parent component state</li>\n<li><strong>symbolId</strong>: the ID of the symbol to use in the SVG document</li>\n<li><strong>wrapperTag</strong>: tag to wrap it in (defaults to span)</li>\n</ul>","frontmatter":{"title":"React component for SVG icons","date":"November 11, 2015","tags":["react","svg"]},"fields":{"slug":"/blog/react-component-for-svg-icons"}}},"pageContext":{"title":"React component for SVG icons","prev":{"frontmatter":{"title":"React starter project with webpack and PHP","tags":["react","webpack"]},"excerpt":"I've been delving into React lately and have started to use it more and more for projects. Previously I was using Gulp to run my builds, but…","fields":{"slug":"/blog/react-starter-project-with-webpack-and-php"}},"next":{"frontmatter":{"title":"Simple chat application in PHP using Ratchet","tags":["php","ratchet","websockets"]},"excerpt":"In the previous post I made a demo chat app using React and Socket.io. In this post we'll build that same app again, this time in PHP using…","fields":{"slug":"/blog/simple-chat-application-in-php-using-ratchet"}}}},"staticQueryHashes":["3649515864","63159454"]}