{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/regular-expression-for-international-names","result":{"data":{"markdownRemark":{"html":"<p>Today I learned something new about regular expressions. Credit goes to <a href=\"https://github.com/mattmontgomery\">Matt Montgomery</a> for sharing this with me! </p>\n<h2>Problem:</h2>\n<p>I was using a regular expression to validate some form data by pattern matching the name fields. It looked something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/^[A-Za-z\\s\\-.&#39;]+$/</code></pre></div>\n<p>This allows for letters and basic punctuation that you might find in a name (space, hyphen, period, apostrophe). So it could handle names like \"A.J. O'Reilley\", or \"Catherine Zeta-Jones\".</p>\n<p>However, as Matt pointed out, it did not account for diacritics. Those are the funny marks that you sometimes see added to a letter that change its pronunciation or emphasis (like the \"ï\" in \"naïve\"). English doesn't use these marks, but they are not uncommon in names from other languages, like \"Pérez\" or \"Schröder\".</p>\n<p>So how do you handle all the possibilities without having a very long and complex regular expression? </p>\n<h2>Solution:</h2>\n<p>The answer was surprisingly simple. The regular expression he offered looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/^[\\p{Letter}\\s\\-.&#39;]+$/u</code></pre></div>\n<p>I'd never seen <code class=\"language-text\">\\p{Letter}</code> or the <code class=\"language-text\">u</code> modifier before. The <code class=\"language-text\">\\p{Letter}</code> part is called a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Unicode_property_escapes\">Unicode property escape</a>. It's similar to a character class, but it tells the regex to include any Unicode character with the <em>given property</em> that <em>matches the given value</em>. In this case, <code class=\"language-text\">\\p{Letter}</code> is a shorthand for <code class=\"language-text\">\\p{General_Category=Letter}</code>, which essentially says \"match any character that is classified as a letter\". A Unicode property escape must also be used with the <code class=\"language-text\">u</code> modifier, which tells your regex to match characters based on their <a href=\"https://www.unicode.org/reports/tr44/#Properties\">Unicode properties</a>.</p>\n<p>This new regex can handle names with diacritics like these:</p>\n<ul>\n<li>Jörg Müller</li>\n<li>François Côté</li>\n<li>Lucía Muñoz</li>\n<li>Søren Kjærgaard</li>\n</ul>\n<p>You can even use characters from non-Latin alphabets like Greek or Cyrillic:</p>\n<ul>\n<li>Ιωάννης (Ioannis)</li>\n<li>Σόφια (Sofia)</li>\n<li>Даша (Dasha)</li>\n<li>Олексій (Oleksii)</li>\n</ul>\n<p>So, if you ever need to \"internationalize\" a regular expression to match letters from other languages, <code class=\"language-text\">\\p{Letter}</code> should do the job nicely!</p>","frontmatter":{"title":"Regular expression for international names","date":"April 14, 2023","tags":["regex"]},"fields":{"slug":"/blog/regular-expression-for-international-names"}}},"pageContext":{"title":"Regular expression for international names","prev":null,"next":{"frontmatter":{"title":"Taking back my data","tags":["privacy"]},"excerpt":"Recently I finished a big project that took a few months to complete. I decided to migrate all of my family's data away from Google products…","fields":{"slug":"/blog/taking-back-my-data"}}}},"staticQueryHashes":["3649515864","63159454"]}