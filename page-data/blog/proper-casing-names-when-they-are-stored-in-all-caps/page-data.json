{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/proper-casing-names-when-they-are-stored-in-all-caps","result":{"data":{"markdownRemark":{"html":"<p>Reformatting names is generally inadvisable, because no matter what you do you'll be wrong. Names don't follow rules consistently (or at all), so it's impossible to programmatically account for every situation. For example, both MacDonald and Macdonald could be correct, depending on the person.</p>\n<p>However, sometimes your hand is forced. Like when names are stored (*gasp*) in ALL CAPS. Who knows why, but they are, and now you have to deal with it. In my case it was a web service that returned a directory listing. I just couldn't bring myself to display every name in the listing in all caps or all lowercase, so I chose to be right most of the time, knowing that I'd still be wrong some of the time.</p>\n<p>Here's my snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// sample names</span>\n<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string single-quoted-string\">'MACDONALD, MCKAY'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'O\\'REILLEY, O\\'NEIL'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string single-quoted-string\">'SMITH-JONES, HANS-JUERGEN'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$names</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// capitalize first letter of each word</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'ucwords'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// capitalize letter following: Mac, Mc, O', or -</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace_callback</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'#\\b(Mac|Mc|O\\'|-)([a-z]+)\\b#'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$matches</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token function\">ucfirst</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$matches</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token variable\">$name</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;pre>'</span> <span class=\"token operator\">.</span> <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&lt;/pre>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>This still doesn't address other complexities like \"van der Meer\" or \"de Gaulle\", but it's a good start. In order to truly handle exceptions, I think you'd have to swap them out case by case, such as supplying an array of specific names and their replacements, <a href=\"http://stackoverflow.com/questions/11529213/given-upper-case-names-transform-to-proper-case-handling-ohara-mcdonald/11532427#11532427\" target=\"_blank\">as described here</a>. But sometimes that's impossible, like when the list of names could change at any time.</p>","frontmatter":{"title":"Proper-casing names when they are stored in all caps","date":"September 30, 2013","tags":["php"]},"fields":{"slug":"/blog/proper-casing-names-when-they-are-stored-in-all-caps"}}},"pageContext":{"title":"Proper-casing names when they are stored in all caps","prev":{"frontmatter":{"title":"Fixing \"$ is not a function\" in Wordpress","tags":["jquery","wordpress"]},"excerpt":"I couldn't figure out why I was getting this error on a Wordpress site the other day: Error: $ is not a function After searching a bit I…","fields":{"slug":"/blog/fixing--is-not-a-function-in-wordpress"}},"next":{"frontmatter":{"title":"Using Twitter's typeahead.js","tags":["javascript"]},"excerpt":"I decided to try out Twitter's typeahead.js the other day. It was bit confusing at first because I kept finding examples and tutorials that…","fields":{"slug":"/blog/using-twitters-typeahead-js"}}}},"staticQueryHashes":["3649515864","63159454"]}