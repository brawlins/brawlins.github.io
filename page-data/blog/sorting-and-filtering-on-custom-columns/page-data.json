{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/sorting-and-filtering-on-custom-columns","result":{"data":{"markdownRemark":{"html":"<p><em>This is a 2-part post discussing how to set up custom columns for a custom post type in WordPress. <a href=\"/blog/adding-custom-columns-including-the-admin-links\">Part 1</a> focuses on adding custom columns, displaying them in the edit posts screen, and adding the admin links to one of those columns. Part 2 discusses how to enable sorting and filtering on those custom columns.</em></p>\n<p>WordPress provides a hook that allows you to define which columns are sortable. There's a generic one and another one for custom post types:</p>\n<ul>\n<li><code class=\"language-text\">manage_edit-post_sortable_columns</code></li>\n<li><code class=\"language-text\">manage_edit-{$post_type}_sortable_columns</code></li>\n</ul>\n<p>Although there appears to be no Codex page to document either of these hooks, both <a href=\"http://scribu.net/wordpress/custom-sortable-columns.html\" target=\"_blank\">scribu</a> and <a href=\"http://justintadlock.com/archives/2011/06/27/custom-columns-for-custom-post-types\" target=\"_blank\">Justin Tadlock</a> have published excellent articles explaining how to use them to make your columns sortable.</p>\n<p>The other hook we'll need is <code class=\"language-text\">pre_get_posts</code> which allows us to define custom callbacks to tell WordPress how to sort and filter our columns.</p>\n<p>First we add the hooks:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'manage_edit-quote_sortable_columns'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'register_sortable_columns'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'pre_get_posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'sort_custom_columns'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add_action</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'pre_get_posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'filter_custom_columns'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first function simply defines which columns should be sortable. Just add your custom sortable columns to the array and/or remove any columns that you don't want to be sortable:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Adds custom columns to the array of sortable columns\n *\n * @param array $columns - the default columns\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register_sortable_columns</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$columns</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$columns</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'quote_author_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'quote_author_name'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$columns</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'quote_author_title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'quote_author_title'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$columns</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'quote_author_organization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'quote_author_organization'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$columns</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now WordPress knows which columns should be sortable. However, it doesn't automatically understand <em>how</em> to sort them, so you have to provide a function to handle that process.</p>\n<p>In this function you have access to the query object, which you can then alter to perform whatever kind of sorting you want. In this example, the data for the custom columns are stored as post_meta values. First we get the column to be sorted on from the query string, and then we tell the query to sort on that meta key. You can easily adapt this to your particular sorting needs by using the appropriate <a href=\"http://codex.wordpress.org/Class_Reference/WP_Query#Parameters\" target=\"_blank\">WP_Query parameters</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Sorts the list on custom columns\n *\n * @param object $query\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sort_custom_columns</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// define custom columns</span>\n    <span class=\"token variable\">$columns</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'quote_author_name'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'quote_author_title'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'quote_author_organization'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// get the column we're sorting on</span>\n    <span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'orderby'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// edit the query to tell WP how to sort our column</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$columns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'meta_key'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'orderby'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'meta_value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The last function is similar. Again, the strategy is to alter the query object so that the list gets filtered on the value(s) we want. First we determine which columns are present in the query string, and then we add a meta query for each one (although I think it only lets you sort by one column at a time).</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Filters the list on custom column values\n *\n * @param object $query\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">filter_custom_columns</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// define custom columns</span>\n    <span class=\"token variable\">$columns</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string single-quoted-string\">'quote_author_name'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'quote_author_title'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string single-quoted-string\">'quote_author_organization'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// see if any are present in the query string</span>\n    <span class=\"token variable\">$filters</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_intersect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$columns</span><span class=\"token punctuation\">,</span> <span class=\"token function\">array_keys</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filters</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// initialize meta query</span>\n    <span class=\"token variable\">$meta_query</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// add each one</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$filters</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$meta_query</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string single-quoted-string\">'key'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$column</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string single-quoted-string\">'value'</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// apply it</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'meta_query'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$meta_query</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Sorting and filtering on custom columns","date":"February 11, 2014","tags":["wordpress"]},"fields":{"slug":"/blog/sorting-and-filtering-on-custom-columns"}}},"pageContext":{"title":"Sorting and filtering on custom columns","prev":{"frontmatter":{"title":"Restore selected posts from a backup","tags":["mysql","wordpress"]},"excerpt":"Recently at work we had a situation where we needed to roll back to the previous day's backup of our WordPress site to undo some changes…","fields":{"slug":"/blog/restore-selected-posts-from-a-backup"}},"next":{"frontmatter":{"title":"Adding custom columns (including the admin links)","tags":["wordpress"]},"excerpt":"This is a 2-part post discussing how to set up custom columns for a custom post type in WordPress. Part 1 focuses on adding custom columns…","fields":{"slug":"/blog/adding-custom-columns-including-the-admin-links"}}}},"staticQueryHashes":["3649515864","63159454"]}