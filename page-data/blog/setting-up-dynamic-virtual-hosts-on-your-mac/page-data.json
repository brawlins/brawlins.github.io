{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/setting-up-dynamic-virtual-hosts-on-your-mac","result":{"data":{"markdownRemark":{"html":"<p>In the past I've always had to make two entries for every new site I add to my local development environment:</p>\n<ol>\n<li>a line in my hosts file (so the site gets served locally)</li>\n<li>a VirtualHost directive in my vhosts file (to tell apache where to find the web files)</li>\n</ol>\n<p>This quickly becomes unsustainable. How would it be if I could just add a new folder to my apache web root and immediately load the new site in my browser? The following setup (adapted from <a href=\"http://www.glenscott.co.uk/blog/2012/11/10/simple-development-hosts-on-mac/\" target=\"_blank\">Glen Scott</a>) makes that possible!</p>\n<p>This setup uses the subdomain \"local\" for all locally developed sites. So if I'm working on a site called \"blah.com\", my local version would be at \"local.blah.com\". Here's how you do it:</p>\n<h2>1. Edit your httpd.conf file</h2>\n<p>You need to enable two things to make this work:</p>\n<ol>\n<li>mod_vhost_alias</li>\n<li>httpd-vhosts.conf</li>\n</ol>\n<p>Find the lines with these directives and uncomment them (your paths may differ):</p>\n<div class=\"gatsby-highlight\" data-language=\"apacheconf\"><pre class=\"language-apacheconf\"><code class=\"language-apacheconf\"><span class=\"token comment\">#LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</span>\n...\n<span class=\"token comment\">#Include /private/etc/apache2/extra/httpd-vhosts.conf</span></code></pre></div>\n<h2>2. Edit your httpd-vhosts.conf file</h2>\n<p>Paste in this block (adjust the path to your apache web root as necessary):</p>\n<div class=\"gatsby-highlight\" data-language=\"apacheconf\"><pre class=\"language-apacheconf\"><code class=\"language-apacheconf\"><span class=\"token comment\"># This uses the requested hostname to map the file path to the web documents to</span>\n<span class=\"token comment\"># be served. I don't want to have to use the \"local\" subdomain prefix on all my</span>\n<span class=\"token comment\"># website folders, so the VirtualDocumentRoot will start at the second dot-</span>\n<span class=\"token comment\"># section of the hostname and use everything from that point forward. So a</span>\n<span class=\"token comment\"># request to \"local.domain.com\" will be served from the folder \"domain.com\" in</span>\n<span class=\"token comment\"># my apache web root.</span>\n<span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;</span>VirtualHost</span><span class=\"token directive-block-parameter attr-value\"> *<span class=\"token punctuation\">:</span>80</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token directive-inline property\">ServerName</span> local.*\n    <span class=\"token directive-inline property\">ServerAlias</span> local.*\n    <span class=\"token directive-inline property\">UseCanonicalName</span> Off\n    <span class=\"token directive-inline property\">VirtualDocumentRoot</span> <span class=\"token string\">\"~/Sites/<span class=\"token variable\">%2+</span>\"</span>\n    <span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;</span>Directory</span><span class=\"token directive-block-parameter attr-value\"> <span class=\"token string\">\"~/Sites/<span class=\"token variable\">%2+</span>\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token directive-inline property\">Options</span> Indexes FollowSymLinks MultiViews\n        <span class=\"token directive-inline property\">AllowOverride</span> All\n        <span class=\"token directive-inline property\">RewriteEngine</span> on\n    <span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;/</span>Directory</span><span class=\"token punctuation\">></span></span>\n<span class=\"token directive-block tag\"><span class=\"token directive-block tag\"><span class=\"token punctuation\">&lt;/</span>VirtualHost</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>3. Fix your DOCUMENT_ROOT</h2>\n<p>One side-effect of using <code class=\"language-text\">mod_vhost_alias</code> is that your <code class=\"language-text\">DOCUMENT_ROOT</code> defaults to the apache web root, not the document root of the virtual host being served. So if you use the PHP global <code class=\"language-text\">$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> in your code, it will contain the wrong value. To fix this problem, we'll tell PHP to require a file that correctly defines our document root before running any PHP scripts.</p>\n<p>Create the following file and save it somewhere that makes sense to you. For example at: <code class=\"language-text\">~/Sites/_config/set-doc-root.php</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">/**\n * Sets the correct DOCUMENT_ROOT value for php\n *\n * Using the apache module mod_vhost_alias to map the path to virtual host\n * document roots has the unfortunate side-effect that the PHP global variable\n * $_SERVER['DOCUMENT_ROOT'] is not set correctly. It defaults to your apache\n * web root, not the document root of the virtual host being served. This\n * script should fix that problem.\n *\n * USAGE:\n * In your php.ini file, add the path to this script in the\n * \"auto_prepend_file\" directive. Then it will be prepended to every PHP\n * script that runs.\n *\n * NOTE: The file must exist and be readable by apache or else you get a fatal\n * error because it gets included as if called by require().\n */</span>\n\n<span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'DOCUMENT_ROOT'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SCRIPT_NAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SCRIPT_FILENAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<h2>4. Create a PAC file</h2>\n<p>We need to make sure that any requests with the \"local\" subdomain (\"local.anything\") get routed to our local apache server. To do this we'll use a proxy auto-configuration (PAC) file.</p>\n<p>Create the following PAC file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FindProxyForURL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> host</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if the host is \"localhost\" or starts with \"local.\", then serve it locally</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>host <span class=\"token operator\">==</span> <span class=\"token string\">\"localhost\"</span> <span class=\"token operator\">||</span> <span class=\"token function\">shExpMatch</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token string\">\"local.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token string\">\"PROXY localhost\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// otherwise go to the internet</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"DIRECT\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Save the file with a \".pac\" extension somewhere in your apache web root (it must be accesible to apache). For example at: <code class=\"language-text\">~/Sites/_config/local.pac</code>.</p>\n<h2>5. Tell apache to use your PAC file</h2>\n<p>Now we need to adjust our System Preferences in OS X to tell apache to use our proxy auto-configuration file.</p>\n<ol>\n<li>Go to System Preferences > Network.</li>\n<li>Select your network in the left-hand pane and click the \"Advanced\" button in the lower-right.</li>\n<li>Click the \"Proxies\" tab and check \"Automatic Proxy Configuration\".</li>\n<li>In the \"URL\" field enter the URL to your PAC file from above. For example: \"<a href=\"http://localhost/_config/local.pac\">http://localhost/_config/local.pac</a>\"</li>\n</ol>\n<p>Now resart apache to apply the settings.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> apachectl restart</code></pre></div>\n<h2>6. Test it</h2>\n<p>Now you should be able to add a folder to your apache web root and immediately see it in your browser. Try it out!</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> -p ~/Sites/newdomain.com\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token operator\">></span> ~/Sites/newdomain.com/index.html</code></pre></div>\n<p>Now visit <a href=\"http://local.newdomain.com/\" target=\"_blank\">http://local.newdomain.com/</a> in your browser and you should see \"Hello World!\".</p>\n<p>That's it!</p>","frontmatter":{"title":"Setting up dynamic virtual hosts on your Mac","date":"April 2, 2013","tags":["apache","mac"]},"fields":{"slug":"/blog/setting-up-dynamic-virtual-hosts-on-your-mac"}}},"pageContext":{"title":"Setting up dynamic virtual hosts on your Mac","prev":{"frontmatter":{"title":"Passing checkbox (boolean) values in ajax","tags":["ajax","javascript","php"]},"excerpt":"Problem: I was reminded today that JavaScript boolean values don't translate well to PHP. Here's an example. Say you have a form with a…","fields":{"slug":"/blog/passing-checkbox-boolean-values-in-ajax"}},"next":null}},"staticQueryHashes":["3649515864","63159454"]}